package monitor

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"

	"github.com/cilium/ebpf/link"
	cperf "github.com/cilium/ebpf/perf"
	"github.com/cilium/ebpf/rlimit"
	"github.com/spf13/cobra"
)

var FLTCmd = &cobra.Command{
	Use:   "mon",
	Short: "copy record ",
	Long:  "copy record",
	Run:   run,
}
var (
	binPath string
	symbol  string
)

func init() {
	FLTCmd.Flags().StringVarP(&binPath, "bin", "b", binPath, "-b /root/jas/workspace/accumulation/framework/ebpf/uprobe/uprobe")
	FLTCmd.Flags().StringVarP(&symbol, "symbol", "s", symbol, "-s accumulation/framework/ebpf/uprobe/demo.FetchMessageRet")
}
func run(cmd *cobra.Command, args []string) {
	monitor(binPath, symbol)
}

func monitor(binPath, symbol string) {
	stopper := make(chan os.Signal, 1)
	signal.Notify(stopper, os.Interrupt, syscall.SIGTERM)

	// Allow the current process to lock memory for eBPF resources.
	if err := rlimit.RemoveMemlock(); err != nil {
		log.Fatal(err)
	}

	// Load pre-compiled programs and maps into the kernel.
	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %s", err)
	}
	defer objs.Close()

	// Open an ELF binary and read its symbols.
	ex, err := link.OpenExecutable(binPath)
	if err != nil {
		log.Fatalf("opening executable: %s", err)
	}

	// Open a Uretprobe at the exit point of the symbol and attach
	// the pre-compiled eBPF program to it.
	up, err := ex.Uprobe(symbol, objs.UprobeFunLostTime, nil)
	if err != nil {
		log.Fatalf("creating uretprobe: %s", err)
	}
	defer up.Close()
	urp, err := ex.Uretprobe(symbol, objs.UretprobeFunLostTime, nil)
	if err != nil {
		log.Fatalf("creating uretprobe: %s", err)
	}
	defer urp.Close()
	log.Printf("Successfully started! Please run \"sudo cat /sys/kernel/debug/tracing/trace_pipe\" to see output of the BPF programs\n")
	rd, err := cperf.NewReader(objs.Events, os.Getpagesize())
	if err != nil {
		log.Fatalf("creating perf event reader: %s", err)
	}
	defer rd.Close()

	go func() {
		// Wait for a signal and close the perf reader,
		// which will interrupt rd.Read() and make the program exit.
		<-stopper
		log.Println("Received signal, exiting program..")

		if err := rd.Close(); err != nil {
			log.Fatalf("closing perf event reader: %s", err)
		}
	}()

	log.Printf("Listening for events..")

	// bpfEvent is generated by bpf2go.
	var event bpfFunPerfStatT
	for {
		record, err := rd.Read()
		if err != nil {
			if errors.Is(err, cperf.ErrClosed) {
				return
			}
			log.Printf("reading from perf event reader: %s", err)
			continue
		}

		if record.LostSamples != 0 {
			log.Printf("perf event ring buffer full, dropped %d samples", record.LostSamples)
			continue
		}

		// Parse the perf event entry into a bpfEvent structure.
		if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
			log.Printf("parsing perf event: %s", err)
			continue
		}

		log.Printf("%s:%s return value: %s", binPath, symbol, fmt.Sprintf("pid:%d,startTime:%d,endTime:%d", event.Pid, event.StartTime, event.EndTime))
	}
}
